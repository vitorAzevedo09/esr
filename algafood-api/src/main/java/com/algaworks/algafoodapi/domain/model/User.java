package com.algaworks.algafoodapi.domain.model;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;

import org.hibernate.annotations.CreationTimestamp;

/**
 * Represents a user in the system. Each user has a unique identifier, a name,
 * an email, a password, a registration date, and can be associated with
 * multiple groups.
 * 
 * <p>
 * The {@code id} field is automatically generated by the database and serves as
 * the primary key for identifying users.
 * </p>
 * 
 * <p>
 * The {@code name} field contains the name of the user and should not be null.
 * It
 * provides a descriptive name for the user.
 * </p>
 * 
 * <p>
 * The {@code email} field contains the email address of the user and should not
 * be null. It uniquely identifies the user and is used for authentication.
 * </p>
 * 
 * <p>
 * The {@code password} field contains the user's password and should not be
 * null. It is used for authentication and should be securely hashed and stored.
 * </p>
 * 
 * <p>
 * The {@code registrationDate} field is automatically set with the date and
 * time
 * when the user was registered in the system.
 * </p>
 * 
 * <p>
 * The {@code groups} field represents a collection of groups to which the user
 * belongs. It is associated with the {@link Group} class and may be an empty
 * list.
 * </p>
 * 
 * <p>
 * The class provides a builder pattern for creating instances of {@code User}.
 * </p>
 * 
 * <p>
 * Example usage:
 * 
 * <pre>
 * {@code
 * User user = new User.Builder()
 *         .setId(1L)
 *         .setName("John Doe")
 *         .setEmail("johndoe@example.com")
 *         .setPassword("hashedPassword")
 *         .setRegistrationDate(LocalDateTime.now())
 *         .setGroups(groups)
 *         .build();
 * userRepository.save(user);
 * }
 * </pre>
 * </p>
 * 
 * @Entity(name = "users")
 */
@Entity(name = "users")
public class User {

    public static class Builder {

        public static Builder newInstance() {
            return new Builder();
        }

        private Long id;

        private String name;

        private String email;

        private String password;

        private LocalDateTime registrationDate;

        private List<Group> groups = new ArrayList<>();

        private Builder() {
        }

        public Builder setId(Long id) {
            this.id = id;
            return this;
        }

        public Builder setName(String name) {
            this.name = name;
            return this;
        }

        public Builder setEmail(String email) {
            this.email = email;
            return this;
        }

        public Builder setPassword(String password) {
            this.password = password;
            return this;
        }

        public Builder setGroups(List<Group> groups) {
            this.groups = groups;
            return this;
        }

        /**
         * @param registrationDate
         * @return
         */
        public Builder setRegistrationDate(LocalDateTime registrationDate) {
            this.registrationDate = registrationDate;
            return this;
        }

        public User build() {
            return new User(this);
        }
    }

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable = false)
    private String name;

    @Column(nullable = false)
    private String email;

    @Column(nullable = false)
    private String password;

    @CreationTimestamp
    @Column(nullable = false, columnDefinition = "datetime")
    private LocalDateTime registrationDate;

    @ManyToMany
    @JoinTable(name = "user_group", joinColumns = @JoinColumn(name = "user_id"), inverseJoinColumns = @JoinColumn(name = "group_id"))
    private List<Group> groups = new ArrayList<>();

    public User(Builder builder) {
        this.id = builder.id;
        this.name = builder.name;
        this.email = builder.email;
        this.password = builder.password;
        this.registrationDate = builder.registrationDate;
        this.groups = builder.groups;
    }

    public List<Group> getGroups() {
        return groups;
    }

    public void setGroups(List<Group> groups) {
        this.groups = groups;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public LocalDateTime getRegistrationDate() {
        return registrationDate;
    }

    public void setRegistrationDate(LocalDateTime registrationDate) {
        this.registrationDate = registrationDate;
    }

    public boolean passwordMatches(String password) {
        return getPassword().equals(password);
    }

    public boolean passwordDontMatches(String password) {
        return !passwordMatches(password);
    }
}
