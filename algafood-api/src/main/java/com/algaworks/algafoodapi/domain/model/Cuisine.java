package com.algaworks.algafoodapi.domain.model;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;

/**
 * Represents a cuisine or type of food offered by restaurants.
 * Each cuisine has a unique identifier, a name, and is associated with one or
 * more restaurants.
 *
 * <p>
 * The {@code id} field is automatically generated by the database and serves
 * as the primary key for identifying cuisines.
 * </p>
 *
 * <p>
 * The {@code name} field contains the name of the cuisine and should not be
 * null.
 * It provides a description of the type of food associated with the cuisine.
 * </p>
 *
 * <p>
 * The {@code restaurants} field represents a collection of restaurants that
 * offer this cuisine.
 * It is associated with the {@link Restaurant} class and may be an empty list.
 * </p>
 *
 * <p>
 * Example usage:
 * 
 * <pre>{@code
 * Cuisine cuisine = new Cuisine();
 * cuisine.setName("Italian");
 * Restaurant restaurant1 = new Restaurant();
 * restaurant1.setName("Italian Restaurant 1");
 * restaurant1.setCuisine(cuisine);
 * Restaurant restaurant2 = new Restaurant();
 * restaurant2.setName("Italian Restaurant 2");
 * restaurant2.setCuisine(cuisine);
 * cuisine.getRestaurants().add(restaurant1);
 * cuisine.getRestaurants().add(restaurant2);
 * cuisineRepository.save(cuisine);
 * }</pre>
 * </p>
 *
 * @Entity(name = "cuisines")
 */
@Entity(name = "cuisines")
public class Cuisine {

    /**
     * The unique identifier for the cuisine.
     * This field is automatically generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Valid
    private Long id;

    /**
     * The name of the cuisine.
     * It cannot be null and should provide a clear description of the type of food.
     */
    @NotNull
    @Column(nullable = false)
    private String name;

    /**
     * The collection of restaurants that offer this cuisine.
     * It may be an empty list and is associated with the {@link Restaurant} class.
     */
    @OneToMany(mappedBy = "cuisine")
    private List<Restaurant> restaurants = new ArrayList<>();

    /**
     * Constructs a new cuisine with the specified identifier and name.
     *
     * @param id   The unique identifier for the cuisine.
     * @param name The name of the cuisine.
     */
    public Cuisine(Long id, String name) {
        this.id = id;
        this.name = name;
    }

    /**
     * Default constructor for the cuisine.
     */
    public Cuisine() {
    }

    /**
     * Retrieves the unique identifier of the cuisine.
     *
     * @return The cuisine's unique identifier.
     */
    public Long getId() {
        return id;
    }

    /**
     * Sets the unique identifier of the cuisine.
     *
     * @param id The cuisine's unique identifier.
     */
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Retrieves the name of the cuisine.
     *
     * @return The name of the cuisine.
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the name of the cuisine.
     *
     * @param name The name of the cuisine.
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Retrieves the collection of restaurants that offer this cuisine.
     *
     * @return The collection of restaurants offering this cuisine.
     */
    public List<Restaurant> getRestaurants() {
        return restaurants;
    }

    /**
     * Sets the collection of restaurants that offer this cuisine.
     *
     * @param restaurants The collection of restaurants offering this cuisine.
     */
    public void setRestaurantes(List<Restaurant> restaurants) {
        this.restaurants = restaurants;
    }
}
