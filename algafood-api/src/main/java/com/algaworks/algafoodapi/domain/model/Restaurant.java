package com.algaworks.algafoodapi.domain.model;

import java.lang.reflect.Field;
import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Embedded;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;

import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;
import org.springframework.util.ReflectionUtils;

/**
 * Represents a restaurant offering food services. Each restaurant has a unique
 * identifier, a name, a delivery fee, an active status, cuisine type, address,
 * creation and update timestamps, and may accept multiple payment methods.
 * 
 * <p>
 * The {@code id} field is automatically generated by the database and serves
 * as the primary key for identifying restaurants.
 * </p>
 * 
 * <p>
 * The {@code name} field contains the name of the restaurant and should not be
 * null. It provides a descriptive name for the restaurant.
 * </p>
 * 
 * <p>
 * The {@code deliveryFee} field represents the cost of delivering food from the
 * restaurant. It cannot be null and should be a positive BigDecimal value.
 * </p>
 * 
 * <p>
 * The {@code active} field indicates whether the restaurant is currently active
 * or not. It cannot be null and is initially set to true.
 * </p>
 * 
 * <p>
 * The {@code cuisine} field is associated with the {@link Cuisine} class and
 * represents the type of cuisine offered by the restaurant. It cannot be null.
 * </p>
 * 
 * <p>
 * The {@code address} field is an embedded class representing the restaurant's
 * address. It can contain various address details like street, city, and postal
 * code.
 * </p>
 * 
 * <p>
 * The {@code createdAt} field is automatically set with the creation timestamp
 * of the restaurant.
 * </p>
 * 
 * <p>
 * The {@code updatedAt} field is automatically set with the update timestamp
 * of the restaurant.
 * </p>
 * 
 * <p>
 * The {@code paymentMethods} field represents a collection of payment methods
 * accepted by the restaurant. It is associated with the {@link PaymentMethod}
 * class and may be an empty list.
 * </p>
 * 
 * <p>
 * The {@code products} field represents a collection of food products offered
 * by
 * the restaurant. It is associated with the {@link Product} class and may be an
 * empty list.
 * </p>
 * 
 * <p>
 * The class also provides methods to activate and deactivate the restaurant, as
 * well as a method to set fields using a map of field names and values.
 * </p>
 * 
 * <p>
 * Example usage:
 * 
 * <pre>
 * {@code
 * Restaurant restaurant = new Restaurant();
 * restaurant.setName("Food King");
 * restaurant.setDeliveryFee(BigDecimal.valueOf(5.99));
 * restaurant.setCuisine(cuisine);
 * restaurant.setAddress(address);
 * restaurant.getPaymentMethods().add(paymentMethod1);
 * restaurant.getPaymentMethods().add(paymentMethod2);
 * restaurant.getProducts().add(product1);
 * restaurant.getProducts().add(product2);
 * restaurantRepository.save(restaurant);
 * }
 * </pre>
 * </p>
 * 
 * @Entity(name = "restaurants")
 */
@Entity(name = "restaurants")
public class Restaurant {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable = false)
    private String name;

    @Column(name = "delivery_fee", nullable = false)
    private BigDecimal deliveryFee;

    @Column(name = "active", nullable = false)
    private Boolean active = Boolean.TRUE;

    @ManyToOne
    @JoinColumn(name = "cuisine_id", nullable = false)
    private Cuisine cuisine;

    @Embedded
    private Address address;

    @CreationTimestamp
    @Column(nullable = false, columnDefinition = "datetime")
    private LocalDateTime createdAt;

    @UpdateTimestamp
    @Column(nullable = false, columnDefinition = "datetime")
    private LocalDateTime updatedAt;

    @ManyToMany
    @JoinTable(name = "restaurant_payment_method", joinColumns = @JoinColumn(name = "restaurant_id"), inverseJoinColumns = @JoinColumn(name = "payment_method_id"))
    private List<PaymentMethod> paymentMethods = new ArrayList<>();

    @OneToMany(mappedBy = "restaurant", cascade = CascadeType.ALL)
    private List<Product> products = new ArrayList<>();

    /**
     * Activates the restaurant by setting the {@code active} field to true.
     */
    public void active() {
        this.active = true;
    }

    /**
     * Deactivates the restaurant by setting the {@code active} field to false.
     */
    public void deactive() {
        this.active = false;
    }

    /**
     * Sets the fields of the restaurant using a map of field names and values.
     * 
     * @param fields A map containing field names and values.
     */
    public void setFromMap(Map<String, Object> fields) {
        fields.forEach((k, v) -> {
            Field field = ReflectionUtils.findField(Restaurant.class, k);
            if (!(field == null)) {
                field.setAccessible(true);
                if (v instanceof Double) {
                    ReflectionUtils.setField(field, this, BigDecimal.valueOf((Double) v));
                } else {
                    ReflectionUtils.setField(field, this, v);
                }
            }
        });
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public BigDecimal getDeliveryFee() {
        return deliveryFee;
    }

    public void setDeliveryFee(BigDecimal deliveryFee) {
        this.deliveryFee = deliveryFee;
    }

    public Boolean getActive() {
        return active;
    }

    public void setActive(Boolean active) {
        this.active = active;
    }

    public Cuisine getCuisine() {
        return cuisine;
    }

    public void setCuisine(Cuisine cuisine) {
        this.cuisine = cuisine;
    }

    public Address getAddress() {
        return address;
    }

    public void setAddress(Address address) {
        this.address = address;
    }

    public LocalDateTime getCreatedAt() {
        return createdAt;
    }

    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }

    public LocalDateTime getUpdatedAt() {
        return updatedAt;
    }

    public void setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    public List<PaymentMethod> getPaymentMethods() {
        return paymentMethods;
    }

    public void setPaymentMethods(List<PaymentMethod> paymentMethods) {
        this.paymentMethods = paymentMethods;
    }

    public List<Product> getProducts() {
        return products;
    }

    public void setProducts(List<Product> products) {
        this.products = products;
    }

    // Getters and setters omitted for brevity.
}
